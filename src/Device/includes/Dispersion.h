/*
 * Copyright 2024 Tom Clabault. GNU GPL3 license.
 * GNU GPL3 license copXYZ[1]: https://www.gnu.org/licenses/gpl-3.0.txt
 */

#ifndef DEVICE_DISPERSION_H
#define DEVICE_DISPERSION_H

#include "HostDeviceCommon/Color.h"
#include "HostDeviceCommon/Xorshift.h"

#define WAVELENGTH_TO_RGB_FIT 0
#define WAVELENGTH_TO_RGB_TABLES 1
#define WavelengthToRGBMethod WAVELENGTH_TO_RGB_FIT

#define MIN_SAMPLE_WAVELENGTH 360
#define MAX_SAMPLE_WAVELENGTH 830

// We only need all the code that follows if we're using the lookup tables
#if WavelengthToRGBMethod == WAVELENGTH_TO_RGB_TABLES

#define CIE_1931_samples 471
#define CIE_1931_MIN 360

const float CIE_X_entries[CIE_1931_samples] = {
    0.0001299000f,   0.0001458470f,   0.0001638021f,   0.0001840037f,   0.0002066902f,   0.0002321000f,   0.0002607280f,
    0.0002930750f,   0.0003293880f,   0.0003699140f,   0.0004149000f,   0.0004641587f,   0.0005189860f,   0.0005818540f,
    0.0006552347f,   0.0007416000f,   0.0008450296f,   0.0009645268f,   0.001094949f,    0.001231154f,    0.001368000f,
    0.001502050f,    0.001642328f,    0.001802382f,    0.001995757f,    0.002236000f,    0.002535385f,    0.002892603f,
    0.003300829f,    0.003753236f,    0.004243000f,    0.004762389f,    0.005330048f,    0.005978712f,    0.006741117f,
    0.007650000f,    0.008751373f,    0.01002888f,     0.01142170f,     0.01286901f,     0.01431000f,     0.01570443f,
    0.01714744f,     0.01878122f,     0.02074801f,     0.02319000f,     0.02620736f,     0.02978248f,     0.03388092f,
    0.03846824f,     0.04351000f,     0.04899560f,     0.05502260f,     0.06171880f,     0.06921200f,     0.07763000f,
    0.08695811f,     0.09717672f,     0.1084063f,      0.1207672f,      0.1343800f,      0.1493582f,      0.1653957f,
    0.1819831f,      0.1986110f,      0.2147700f,      0.2301868f,      0.2448797f,      0.2587773f,      0.2718079f,
    0.2839000f,      0.2949438f,      0.3048965f,      0.3137873f,      0.3216454f,      0.3285000f,      0.3343513f,
    0.3392101f,      0.3431213f,      0.3461296f,      0.3482800f,      0.3495999f,      0.3501474f,      0.3500130f,
    0.3492870f,      0.3480600f,      0.3463733f,      0.3442624f,      0.3418088f,      0.3390941f,      0.3362000f,
    0.3331977f,      0.3300411f,      0.3266357f,      0.3228868f,      0.3187000f,      0.3140251f,      0.3088840f,
    0.3032904f,      0.2972579f,      0.2908000f,      0.2839701f,      0.2767214f,      0.2689178f,      0.2604227f,
    0.2511000f,      0.2408475f,      0.2298512f,      0.2184072f,      0.2068115f,      0.1953600f,      0.1842136f,
    0.1733273f,      0.1626881f,      0.1522833f,      0.1421000f,      0.1321786f,      0.1225696f,      0.1132752f,
    0.1042979f,      0.09564000f,     0.08729955f,     0.07930804f,     0.07171776f,     0.06458099f,     0.05795001f,
    0.05186211f,     0.04628152f,     0.04115088f,     0.03641283f,     0.03201000f,     0.02791720f,     0.02414440f,
    0.02068700f,     0.01754040f,     0.01470000f,     0.01216179f,     0.009919960f,    0.007967240f,    0.006296346f,
    0.004900000f,    0.003777173f,    0.002945320f,    0.002424880f,    0.002236293f,    0.002400000f,    0.002925520f,
    0.003836560f,    0.005174840f,    0.006982080f,    0.009300000f,    0.01214949f,     0.01553588f,     0.01947752f,
    0.02399277f,     0.02910000f,     0.03481485f,     0.04112016f,     0.04798504f,     0.05537861f,     0.06327000f,
    0.07163501f,     0.08046224f,     0.08973996f,     0.09945645f,     0.1096000f,      0.1201674f,      0.1311145f,
    0.1423679f,      0.1538542f,      0.1655000f,      0.1772571f,      0.1891400f,      0.2011694f,      0.2133658f,
    0.2257499f,      0.2383209f,      0.2510668f,      0.2639922f,      0.2771017f,      0.2904000f,      0.3038912f,
    0.3175726f,      0.3314384f,      0.3454828f,      0.3597000f,      0.3740839f,      0.3886396f,      0.4033784f,
    0.4183115f,      0.4334499f,      0.4487953f,      0.4643360f,      0.4800640f,      0.4959713f,      0.5120501f,
    0.5282959f,      0.5446916f,      0.5612094f,      0.5778215f,      0.5945000f,      0.6112209f,      0.6279758f,
    0.6447602f,      0.6615697f,      0.6784000f,      0.6952392f,      0.7120586f,      0.7288284f,      0.7455188f,
    0.7621000f,      0.7785432f,      0.7948256f,      0.8109264f,      0.8268248f,      0.8425000f,      0.8579325f,
    0.8730816f,      0.8878944f,      0.9023181f,      0.9163000f,      0.9297995f,      0.9427984f,      0.9552776f,
    0.9672179f,      0.9786000f,      0.9893856f,      0.9995488f,      1.0090892f,      1.0180064f,      1.0263000f,
    1.0339827f,      1.0409860f,      1.0471880f,      1.0524667f,      1.0567000f,      1.0597944f,      1.0617992f,
    1.0628068f,      1.0629096f,      1.0622000f,      1.0607352f,      1.0584436f,      1.0552244f,      1.0509768f,
    1.0456000f,      1.0390369f,      1.0313608f,      1.0226662f,      1.0130477f,      1.0026000f,      0.9913675f,
    0.9793314f,      0.9664916f,      0.9528479f,      0.9384000f,      0.9231940f,      0.9072440f,      0.8905020f,
    0.8729200f,      0.8544499f,      0.8350840f,      0.8149460f,      0.7941860f,      0.7729540f,      0.7514000f,
    0.7295836f,      0.7075888f,      0.6856022f,      0.6638104f,      0.6424000f,      0.6215149f,      0.6011138f,
    0.5811052f,      0.5613977f,      0.5419000f,      0.5225995f,      0.5035464f,      0.4847436f,      0.4661939f,
    0.4479000f,      0.4298613f,      0.4120980f,      0.3946440f,      0.3775333f,      0.3608000f,      0.3444563f,
    0.3285168f,      0.3130192f,      0.2980011f,      0.2835000f,      0.2695448f,      0.2561184f,      0.2431896f,
    0.2307272f,      0.2187000f,      0.2070971f,      0.1959232f,      0.1851708f,      0.1748323f,      0.1649000f,
    0.1553667f,      0.1462300f,      0.1374900f,      0.1291467f,      0.1212000f,      0.1136397f,      0.1064650f,
    0.09969044f,     0.09333061f,     0.08740000f,     0.08190096f,     0.07680428f,     0.07207712f,     0.06768664f,
    0.06360000f,     0.05980685f,     0.05628216f,     0.05297104f,     0.04981861f,     0.04677000f,     0.04378405f,
    0.04087536f,     0.03807264f,     0.03540461f,     0.03290000f,     0.03056419f,     0.02838056f,     0.02634484f,
    0.02445275f,     0.02270000f,     0.02108429f,     0.01959988f,     0.01823732f,     0.01698717f,     0.01584000f,
    0.01479064f,     0.01383132f,     0.01294868f,     0.01212920f,     0.01135916f,     0.01062935f,     0.009938846f,
    0.009288422f,    0.008678854f,    0.008110916f,    0.007582388f,    0.007088746f,    0.006627313f,    0.006195408f,
    0.005790346f,    0.005409826f,    0.005052583f,    0.004717512f,    0.004403507f,    0.004109457f,    0.003833913f,
    0.003575748f,    0.003334342f,    0.003109075f,    0.002899327f,    0.002704348f,    0.002523020f,    0.002354168f,
    0.002196616f,    0.002049190f,    0.001910960f,    0.001781438f,    0.001660110f,    0.001546459f,    0.001439971f,
    0.001340042f,    0.001246275f,    0.001158471f,    0.001076430f,    0.0009999493f,   0.0009287358f,   0.0008624332f,
    0.0008007503f,   0.0007433960f,   0.0006900786f,   0.0006405156f,   0.0005945021f,   0.0005518646f,   0.0005124290f,
    0.0004760213f,   0.0004424536f,   0.0004115117f,   0.0003829814f,   0.0003566491f,   0.0003323011f,   0.0003097586f,
    0.0002888871f,   0.0002695394f,   0.0002515682f,   0.0002348261f,   0.0002191710f,   0.0002045258f,   0.0001908405f,
    0.0001780654f,   0.0001661505f,   0.0001550236f,   0.0001446219f,   0.0001349098f,   0.0001258520f,   0.0001174130f,
    0.0001095515f,   0.0001022245f,   0.00009539445f,  0.00008902390f,  0.00008307527f,  0.00007751269f,  0.00007231304f,
    0.00006745778f,  0.00006292844f,  0.00005870652f,  0.00005477028f,  0.00005109918f,  0.00004767654f,  0.00004448567f,
    0.00004150994f,  0.00003873324f,  0.00003614203f,  0.00003372352f,  0.00003146487f,  0.00002935326f,  0.00002737573f,
    0.00002552433f,  0.00002379376f,  0.00002217870f,  0.00002067383f,  0.00001927226f,  0.00001796640f,  0.00001674991f,
    0.00001561648f,  0.00001455977f,  0.00001357387f,  0.00001265436f,  0.00001179723f,  0.00001099844f,  0.00001025398f,
    0.000009559646f, 0.000008912044f, 0.000008308358f, 0.000007745769f, 0.000007221456f, 0.000006732475f, 0.000006276423f,
    0.000005851304f, 0.000005455118f, 0.000005085868f, 0.000004741466f, 0.000004420236f, 0.000004120783f, 0.000003841716f,
    0.000003581652f, 0.000003339127f, 0.000003112949f, 0.000002902121f, 0.000002705645f, 0.000002522525f, 0.000002351726f,
    0.000002192415f, 0.000002043902f, 0.000001905497f, 0.000001776509f, 0.000001656215f, 0.000001544022f, 0.000001439440f,
    0.000001341977f, 0.000001251141f};
const float CIE_Y_entries[CIE_1931_samples] = {
    0.000003917000f,  0.000004393581f,  0.000004929604f,  0.000005532136f,  0.000006208245f,  0.000006965000f,
    0.000007813219f,  0.000008767336f,  0.000009839844f,  0.00001104323f,   0.00001239000f,   0.00001388641f,
    0.00001555728f,   0.00001744296f,   0.00001958375f,   0.00002202000f,   0.00002483965f,   0.00002804126f,
    0.00003153104f,   0.00003521521f,   0.00003900000f,   0.00004282640f,   0.00004691460f,   0.00005158960f,
    0.00005717640f,   0.00006400000f,   0.00007234421f,   0.00008221224f,   0.00009350816f,   0.0001061361f,
    0.0001200000f,    0.0001349840f,    0.0001514920f,    0.0001702080f,    0.0001918160f,    0.0002170000f,
    0.0002469067f,    0.0002812400f,    0.0003185200f,    0.0003572667f,    0.0003960000f,    0.0004337147f,
    0.0004730240f,    0.0005178760f,    0.0005722187f,    0.0006400000f,    0.0007245600f,    0.0008255000f,
    0.0009411600f,    0.001069880f,     0.001210000f,     0.001362091f,     0.001530752f,     0.001720368f,
    0.001935323f,     0.002180000f,     0.002454800f,     0.002764000f,     0.003117800f,     0.003526400f,
    0.004000000f,     0.004546240f,     0.005159320f,     0.005829280f,     0.006546160f,     0.007300000f,
    0.008086507f,     0.008908720f,     0.009767680f,     0.01066443f,      0.01160000f,      0.01257317f,
    0.01358272f,      0.01462968f,      0.01571509f,      0.01684000f,      0.01800736f,      0.01921448f,
    0.02045392f,      0.02171824f,      0.02300000f,      0.02429461f,      0.02561024f,      0.02695857f,
    0.02835125f,      0.02980000f,      0.03131083f,      0.03288368f,      0.03452112f,      0.03622571f,
    0.03800000f,      0.03984667f,      0.04176800f,      0.04376600f,      0.04584267f,      0.04800000f,
    0.05024368f,      0.05257304f,      0.05498056f,      0.05745872f,      0.06000000f,      0.06260197f,
    0.06527752f,      0.06804208f,      0.07091109f,      0.07390000f,      0.07701600f,      0.08026640f,
    0.08366680f,      0.08723280f,      0.09098000f,      0.09491755f,      0.09904584f,      0.1033674f,
    0.1078846f,       0.1126000f,       0.1175320f,       0.1226744f,       0.1279928f,       0.1334528f,
    0.1390200f,       0.1446764f,       0.1504693f,       0.1564619f,       0.1627177f,       0.1693000f,
    0.1762431f,       0.1835581f,       0.1912735f,       0.1994180f,       0.2080200f,       0.2171199f,
    0.2267345f,       0.2368571f,       0.2474812f,       0.2586000f,       0.2701849f,       0.2822939f,
    0.2950505f,       0.3085780f,       0.3230000f,       0.3384021f,       0.3546858f,       0.3716986f,
    0.3892875f,       0.4073000f,       0.4256299f,       0.4443096f,       0.4633944f,       0.4829395f,
    0.5030000f,       0.5235693f,       0.5445120f,       0.5656900f,       0.5869653f,       0.6082000f,
    0.6293456f,       0.6503068f,       0.6708752f,       0.6908424f,       0.7100000f,       0.7281852f,
    0.7454636f,       0.7619694f,       0.7778368f,       0.7932000f,       0.8081104f,       0.8224962f,
    0.8363068f,       0.8494916f,       0.8620000f,       0.8738108f,       0.8849624f,       0.8954936f,
    0.9054432f,       0.9148501f,       0.9237348f,       0.9320924f,       0.9399226f,       0.9472252f,
    0.9540000f,       0.9602561f,       0.9660074f,       0.9712606f,       0.9760225f,       0.9803000f,
    0.9840924f,       0.9874812f,       0.9903128f,       0.9928116f,       0.9949501f,       0.9967108f,
    0.9980983f,       0.9991120f,       0.9997482f,       1.0000000f,       0.9998567f,       0.9993046f,
    0.9983255f,       0.9968987f,       0.9950000f,       0.9926005f,       0.9897426f,       0.9864444f,
    0.9827241f,       0.9786000f,       0.9740837f,       0.9691712f,       0.9638568f,       0.9581349f,
    0.9520000f,       0.9454504f,       0.9384992f,       0.9311628f,       0.9234576f,       0.9154000f,
    0.9070064f,       0.8982772f,       0.8892048f,       0.8797816f,       0.8700000f,       0.8598613f,
    0.8493920f,       0.8386220f,       0.8275813f,       0.8163000f,       0.8047947f,       0.7930820f,
    0.7811920f,       0.7691547f,       0.7570000f,       0.7447541f,       0.7324224f,       0.7200036f,
    0.7074965f,       0.6949000f,       0.6822192f,       0.6694716f,       0.6566744f,       0.6438448f,
    0.6310000f,       0.6181555f,       0.6053144f,       0.5924756f,       0.5796379f,       0.5668000f,
    0.5539611f,       0.5411372f,       0.5283528f,       0.5156323f,       0.5030000f,       0.4904688f,
    0.4780304f,       0.4656776f,       0.4534032f,       0.4412000f,       0.4290800f,       0.4170360f,
    0.4050320f,       0.3930320f,       0.3810000f,       0.3689184f,       0.3568272f,       0.3447768f,
    0.3328176f,       0.3210000f,       0.3093381f,       0.2978504f,       0.2865936f,       0.2756245f,
    0.2650000f,       0.2547632f,       0.2448896f,       0.2353344f,       0.2260528f,       0.2170000f,
    0.2081616f,       0.1995488f,       0.1911552f,       0.1829744f,       0.1750000f,       0.1672235f,
    0.1596464f,       0.1522776f,       0.1451259f,       0.1382000f,       0.1315003f,       0.1250248f,
    0.1187792f,       0.1127691f,       0.1070000f,       0.1014762f,       0.09618864f,      0.09112296f,
    0.08626485f,      0.08160000f,      0.07712064f,      0.07282552f,      0.06871008f,      0.06476976f,
    0.06100000f,      0.05739621f,      0.05395504f,      0.05067376f,      0.04754965f,      0.04458000f,
    0.04175872f,      0.03908496f,      0.03656384f,      0.03420048f,      0.03200000f,      0.02996261f,
    0.02807664f,      0.02632936f,      0.02470805f,      0.02320000f,      0.02180077f,      0.02050112f,
    0.01928108f,      0.01812069f,      0.01700000f,      0.01590379f,      0.01483718f,      0.01381068f,
    0.01283478f,      0.01192000f,      0.01106831f,      0.01027339f,      0.009533311f,     0.008846157f,
    0.008210000f,     0.007623781f,     0.007085424f,     0.006591476f,     0.006138485f,     0.005723000f,
    0.005343059f,     0.004995796f,     0.004676404f,     0.004380075f,     0.004102000f,     0.003838453f,
    0.003589099f,     0.003354219f,     0.003134093f,     0.002929000f,     0.002738139f,     0.002559876f,
    0.002393244f,     0.002237275f,     0.002091000f,     0.001953587f,     0.001824580f,     0.001703580f,
    0.001590187f,     0.001484000f,     0.001384496f,     0.001291268f,     0.001204092f,     0.001122744f,
    0.001047000f,     0.0009765896f,    0.0009111088f,    0.0008501332f,    0.0007932384f,    0.0007400000f,
    0.0006900827f,    0.0006433100f,    0.0005994960f,    0.0005584547f,    0.0005200000f,    0.0004839136f,
    0.0004500528f,    0.0004183452f,    0.0003887184f,    0.0003611000f,    0.0003353835f,    0.0003114404f,
    0.0002891656f,    0.0002684539f,    0.0002492000f,    0.0002313019f,    0.0002146856f,    0.0001992884f,
    0.0001850475f,    0.0001719000f,    0.0001597781f,    0.0001486044f,    0.0001383016f,    0.0001287925f,
    0.0001200000f,    0.0001118595f,    0.0001043224f,    0.00009733560f,   0.00009084587f,   0.00008480000f,
    0.00007914667f,   0.00007385800f,   0.00006891600f,   0.00006430267f,   0.00006000000f,   0.00005598187f,
    0.00005222560f,   0.00004871840f,   0.00004544747f,   0.00004240000f,   0.00003956104f,   0.00003691512f,
    0.00003444868f,   0.00003214816f,   0.00003000000f,   0.00002799125f,   0.00002611356f,   0.00002436024f,
    0.00002272461f,   0.00002120000f,   0.00001977855f,   0.00001845285f,   0.00001721687f,   0.00001606459f,
    0.00001499000f,   0.00001398728f,   0.00001305155f,   0.00001217818f,   0.00001136254f,   0.00001060000f,
    0.000009885877f,  0.000009217304f,  0.000008592362f,  0.000008009133f,  0.000007465700f,  0.000006959567f,
    0.000006487995f,  0.000006048699f,  0.000005639396f,  0.000005257800f,  0.000004901771f,  0.000004569720f,
    0.000004260194f,  0.000003971739f,  0.000003702900f,  0.000003452163f,  0.000003218302f,  0.000003000300f,
    0.000002797139f,  0.000002607800f,  0.000002431220f,  0.000002266531f,  0.000002113013f,  0.000001969943f,
    0.000001836600f,  0.000001712230f,  0.000001596228f,  0.000001488090f,  0.000001387314f,  0.000001293400f,
    0.000001205820f,  0.000001124143f,  0.000001048009f,  0.0000009770578f, 0.0000009109300f, 0.0000008492513f,
    0.0000007917212f, 0.0000007380904f, 0.0000006881098f, 0.0000006415300f, 0.0000005980895f, 0.0000005575746f,
    0.0000005198080f, 0.0000004846123f, 0.0000004518100f};

const float CIE_Z_entries[CIE_1931_samples] = {
    0.0006061000f, 0.0006808792f, 0.0007651456f, 0.0008600124f,
    0.0009665928f, 0.001086000f, 0.001220586f, 0.001372729f,
    0.001543579f, 0.001734286f, 0.001946000f, 0.002177777f,
    0.002435809f, 0.002731953f, 0.003078064f, 0.003486000f,
    0.003975227f, 0.004540880f, 0.005158320f, 0.005802907f,
    0.006450001f, 0.007083216f, 0.007745488f, 0.008501152f,
    0.009414544f, 0.01054999f, 0.01196580f, 0.01365587f,
    0.01558805f, 0.01773015f, 0.02005001f, 0.02251136f,
    0.02520288f, 0.02827972f, 0.03189704f, 0.03621000f,
    0.04143771f, 0.04750372f, 0.05411988f, 0.06099803f,
    0.06785001f, 0.07448632f, 0.08136156f, 0.08915364f,
    0.09854048f, 0.1102000f, 0.1246133f, 0.1417017f,
    0.1613035f, 0.1832568f, 0.2074000f, 0.2336921f,
    0.2626114f, 0.2947746f, 0.3307985f, 0.3713000f,
    0.4162091f, 0.4654642f, 0.5196948f, 0.5795303f,
    0.6456000f, 0.7184838f, 0.7967133f, 0.8778459f,
    0.9594390f, 1.0390501f, 1.1153673f, 1.1884971f,
    1.2581233f, 1.3239296f, 1.3856000f, 1.4426352f,
    1.4948035f, 1.5421903f, 1.5848807f, 1.6229600f,
    1.6564048f, 1.6852959f, 1.7098745f, 1.7303821f,
    1.7470600f, 1.7600446f, 1.7696233f, 1.7762637f,
    1.7804334f, 1.7826000f, 1.7829682f, 1.7816998f,
    1.7791982f, 1.7758671f, 1.7721100f, 1.7682589f,
    1.7640390f, 1.7589438f, 1.7524663f, 1.7441000f,
    1.7335595f, 1.7208581f, 1.7059369f, 1.6887372f,
    1.6692000f, 1.6475287f, 1.6234127f, 1.5960223f,
    1.5645280f, 1.5281000f, 1.4861114f, 1.4395215f,
    1.3898799f, 1.3387362f, 1.2876400f, 1.2374223f,
    1.1878243f, 1.1387611f, 1.0901480f, 1.0419000f,
    0.9941976f, 0.9473473f, 0.9014531f, 0.8566193f,
    0.8129501f, 0.7705173f, 0.7294448f, 0.6899136f,
    0.6521049f, 0.6162000f, 0.5823286f, 0.5504162f,
    0.5203376f, 0.4919673f, 0.4651800f, 0.4399246f,
    0.4161836f, 0.3938822f, 0.3729459f, 0.3533000f,
    0.3348578f, 0.3175521f, 0.3013375f, 0.2861686f,
    0.2720000f, 0.2588171f, 0.2464838f, 0.2347718f,
    0.2234533f, 0.2123000f, 0.2011692f, 0.1901196f,
    0.1792254f, 0.1685608f, 0.1582000f, 0.1481383f,
    0.1383758f, 0.1289942f, 0.1200751f, 0.1117000f,
    0.1039048f, 0.09666748f, 0.08998272f, 0.08384531f,
    0.07824999f, 0.07320899f, 0.06867816f, 0.06456784f,
    0.06078835f, 0.05725001f, 0.05390435f, 0.05074664f,
    0.04775276f, 0.04489859f, 0.04216000f, 0.03950728f,
    0.03693564f, 0.03445836f, 0.03208872f, 0.02984000f,
    0.02771181f, 0.02569444f, 0.02378716f, 0.02198925f,
    0.02030000f, 0.01871805f, 0.01724036f, 0.01586364f,
    0.01458461f, 0.01340000f, 0.01230723f, 0.01130188f,
    0.01037792f, 0.009529306f, 0.008749999f, 0.008035200f,
    0.007381600f, 0.006785400f, 0.006242800f, 0.005749999f,
    0.005303600f, 0.004899800f, 0.004534200f, 0.004202400f,
    0.003900000f, 0.003623200f, 0.003370600f, 0.003141400f,
    0.002934800f, 0.002749999f, 0.002585200f, 0.002438600f,
    0.002309400f, 0.002196800f, 0.002100000f, 0.002017733f,
    0.001948200f, 0.001889800f, 0.001840933f, 0.001800000f,
    0.001766267f, 0.001737800f, 0.001711200f, 0.001683067f,
    0.001650001f, 0.001610133f, 0.001564400f, 0.001513600f,
    0.001458533f, 0.001400000f, 0.001336667f, 0.001270000f,
    0.001205000f, 0.001146667f, 0.001100000f, 0.001068800f,
    0.001049400f, 0.001035600f, 0.001021200f, 0.001000000f,
    0.0009686400f, 0.0009299200f, 0.0008868800f, 0.0008425600f,
    0.0008000000f, 0.0007609600f, 0.0007236800f, 0.0006859200f,
    0.0006454400f, 0.0006000000f, 0.0005478667f, 0.0004916000f,
    0.0004354000f, 0.0003834667f, 0.0003400000f, 0.0003072533f,
    0.0002831600f, 0.0002654400f, 0.0002518133f, 0.0002400000f,
    0.0002295467f, 0.0002206400f, 0.0002119600f, 0.0002021867f,
    0.0001900000f, 0.0001742133f, 0.0001556400f, 0.0001359600f,
    0.0001168533f, 0.0001000000f, 0.00008613333f, 0.00007460000f,
    0.00006500000f, 0.00005693333f, 0.00004999999f, 0.00004416000f,
    0.00003948000f, 0.00003572000f, 0.00003264000f, 0.00003000000f,
    0.00002765333f, 0.00002556000f, 0.00002364000f, 0.00002181333f,
    0.00002000000f, 0.00001813333f, 0.00001620000f, 0.00001420000f,
    0.00001213333f, 0.00001000000f, 0.000007733333f, 0.000005400000f,
    0.000003200000f, 0.000001333333f, 0.000000000000f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f, 0.0f,
    0.0f, 0.0f, 0.0f
};

#define D65_Samples 531
#define D65_MIN 300
#define D65_MAX (D65_MIN + D65_Samples - 1)

const float D65_SPD[] = {
    0.0341f,  0.36014f, 0.68618f, 1.01222f, 1.33826f, 1.6643f,  1.99034f, 2.31638f, 2.64242f, 2.96846f, 3.2945f,  4.98865f, 6.6828f,
    8.37695f, 10.0711f, 11.7652f, 13.4594f, 15.1535f, 16.8477f, 18.5418f, 20.236f,  21.9177f, 23.5995f, 25.2812f, 26.963f,  28.6447f,
    30.3265f, 32.0082f, 33.69f,   35.3717f, 37.0535f, 37.343f,  37.6326f, 37.9221f, 38.2116f, 38.5011f, 38.7907f, 39.0802f, 39.3697f,
    39.6593f, 39.9488f, 40.4451f, 40.9414f, 41.4377f, 41.934f,  42.4302f, 42.9265f, 43.4228f, 43.9191f, 44.4154f, 44.9117f, 45.0844f,
    45.257f,  45.4297f, 45.6023f, 45.775f,  45.9477f, 46.1203f, 46.293f,  46.4656f, 46.6383f, 47.1834f, 47.7285f, 48.2735f, 48.8186f,
    49.3637f, 49.9088f, 50.4539f, 50.9989f, 51.544f,  52.0891f, 51.8777f, 51.6664f, 51.455f,  51.2437f, 51.0323f, 50.8209f, 50.6096f,
    50.3982f, 50.1869f, 49.9755f, 50.4428f, 50.91f,   51.3773f, 51.8446f, 52.3118f, 52.7791f, 53.2464f, 53.7137f, 54.1809f, 54.6482f,
    57.4589f, 60.2695f, 63.0802f, 65.8909f, 68.7015f, 71.5122f, 74.3229f, 77.1336f, 79.9442f, 82.7549f, 83.628f,  84.5011f, 85.3742f,
    86.2473f, 87.1204f, 87.9936f, 88.8667f, 89.7398f, 90.6129f, 91.486f,  91.6806f, 91.8752f, 92.0697f, 92.2643f, 92.4589f, 92.6535f,
    92.8481f, 93.0426f, 93.2372f, 93.4318f, 92.7568f, 92.0819f, 91.4069f, 90.732f,  90.057f,  89.3821f, 88.7071f, 88.0322f, 87.3572f,
    86.6823f, 88.5006f, 90.3188f, 92.1371f, 93.9554f, 95.7736f, 97.5919f, 99.4102f, 101.228f, 103.047f, 104.865f, 106.079f, 107.294f,
    108.508f, 109.722f, 110.936f, 112.151f, 113.365f, 114.579f, 115.794f, 117.008f, 117.088f, 117.169f, 117.249f, 117.33f,  117.41f,
    117.49f,  117.571f, 117.651f, 117.732f, 117.812f, 117.517f, 117.222f, 116.927f, 116.632f, 116.336f, 116.041f, 115.746f, 115.451f,
    115.156f, 114.861f, 114.967f, 115.073f, 115.18f,  115.286f, 115.392f, 115.498f, 115.604f, 115.711f, 115.817f, 115.923f, 115.212f,
    114.501f, 113.789f, 113.078f, 112.367f, 111.656f, 110.945f, 110.233f, 109.522f, 108.811f, 108.865f, 108.92f,  108.974f, 109.028f,
    109.082f, 109.137f, 109.191f, 109.245f, 109.3f,   109.354f, 109.199f, 109.044f, 108.888f, 108.733f, 108.578f, 108.423f, 108.268f,
    108.112f, 107.957f, 107.802f, 107.501f, 107.2f,   106.898f, 106.597f, 106.296f, 105.995f, 105.694f, 105.392f, 105.091f, 104.79f,
    105.08f,  105.37f,  105.66f,  105.95f,  106.239f, 106.529f, 106.819f, 107.109f, 107.399f, 107.689f, 107.361f, 107.032f, 106.704f,
    106.375f, 106.047f, 105.719f, 105.39f,  105.062f, 104.733f, 104.405f, 104.369f, 104.333f, 104.297f, 104.261f, 104.225f, 104.19f,
    104.154f, 104.118f, 104.082f, 104.046f, 103.641f, 103.237f, 102.832f, 102.428f, 102.023f, 101.618f, 101.214f, 100.809f, 100.405f,
    100.0f,     99.6334f, 99.2668f, 98.9003f, 98.5337f, 98.1671f, 97.8005f, 97.4339f, 97.0674f, 96.7008f, 96.3342f, 96.2796f, 96.225f,
    96.1703f, 96.1157f, 96.0611f, 96.0065f, 95.9519f, 95.8972f, 95.8426f, 95.788f,  95.0778f, 94.3675f, 93.6573f, 92.947f,  92.2368f,
    91.5266f, 90.8163f, 90.1061f, 89.3958f, 88.6856f, 88.8177f, 88.9497f, 89.0818f, 89.2138f, 89.3459f, 89.478f,  89.61f,   89.7421f,
    89.8741f, 90.0062f, 89.9655f, 89.9248f, 89.8841f, 89.8434f, 89.8026f, 89.7619f, 89.7212f, 89.6805f, 89.6398f, 89.5991f, 89.4091f,
    89.219f,  89.029f,  88.8389f, 88.6489f, 88.4589f, 88.2688f, 88.0788f, 87.8887f, 87.6987f, 87.2577f, 86.8167f, 86.3757f, 85.9347f,
    85.4936f, 85.0526f, 84.6116f, 84.1706f, 83.7296f, 83.2886f, 83.3297f, 83.3707f, 83.4118f, 83.4528f, 83.4939f, 83.535f,  83.576f,
    83.6171f, 83.6581f, 83.6992f, 83.332f,  82.9647f, 82.5975f, 82.2302f, 81.863f,  81.4958f, 81.1285f, 80.7613f, 80.394f,  80.0268f,
    80.0456f, 80.0644f, 80.0831f, 80.1019f, 80.1207f, 80.1395f, 80.1583f, 80.177f,  80.1958f, 80.2146f, 80.4209f, 80.6272f, 80.8336f,
    81.0399f, 81.2462f, 81.4525f, 81.6588f, 81.8652f, 82.0715f, 82.2778f, 81.8784f, 81.4791f, 81.0797f, 80.6804f, 80.281f,  79.8816f,
    79.4823f, 79.0829f, 78.6836f, 78.2842f, 77.4279f, 76.5716f, 75.7153f, 74.859f,  74.0027f, 73.1465f, 72.2902f, 71.4339f, 70.5776f,
    69.7213f, 69.9101f, 70.0989f, 70.2876f, 70.4764f, 70.6652f, 70.854f,  71.0428f, 71.2315f, 71.4203f, 71.6091f, 71.8831f, 72.1571f,
    72.4311f, 72.7051f, 72.979f,  73.253f,  73.527f,  73.801f,  74.075f,  74.349f,  73.0745f, 71.8f,    70.5255f, 69.251f,  67.9765f,
    66.702f,  65.4275f, 64.153f,  62.8785f, 61.604f,  62.4322f, 63.2603f, 64.0885f, 64.9166f, 65.7448f, 66.573f,  67.4011f, 68.2293f,
    69.0574f, 69.8856f, 70.4057f, 70.9259f, 71.446f,  71.9662f, 72.4863f, 73.0064f, 73.5266f, 74.0467f, 74.5669f, 75.087f,  73.9376f,
    72.7881f, 71.6387f, 70.4893f, 69.3398f, 68.1904f, 67.041f,  65.8916f, 64.7421f, 63.5927f, 61.8752f, 60.1578f, 58.4403f, 56.7229f,
    55.0054f, 53.288f,  51.5705f, 49.8531f, 48.1356f, 46.4182f, 48.4569f, 50.4956f, 52.5344f, 54.5731f, 56.6118f, 58.6505f, 60.6892f,
    62.728f,  64.7667f, 66.8054f, 66.4631f, 66.1209f, 65.7786f, 65.4364f, 65.0941f, 64.7518f, 64.4096f, 64.0673f, 63.7251f, 63.3828f,
    63.4749f, 63.567f,  63.6592f, 63.7513f, 63.8434f, 63.9355f, 64.0276f, 64.1198f, 64.2119f, 64.304f,  63.8188f, 63.3336f, 62.8484f,
    62.3632f, 61.8779f, 61.3927f, 60.9075f, 60.4223f, 59.9371f, 59.4519f, 58.7026f, 57.9533f, 57.204f,  56.4547f, 55.7054f, 54.9562f,
    54.2069f, 53.4576f, 52.7083f, 51.959f,  52.5072f, 53.0553f, 53.6035f, 54.1516f, 54.6998f, 55.248f,  55.7961f, 56.3443f, 56.8924f,
    57.4406f, 57.7278f, 58.015f,  58.3022f, 58.5894f, 58.8765f, 59.1637f, 59.4509f, 59.7381f, 60.0253f, 60.3125f};

/**
 * Converts an XYZ value to the sRGB color space (linear, no gamma correction is applied)
 */
HIPRT_HOST_DEVICE HIPRT_INLINE ColorRGB32F XYZ_to_sRGB(const ColorRGB32F& XYZ)
{
    /**
     * Reference: https://en.wikipedia.org/wiki/SRGB#Correspondence_to_CIE_XYZ_stimulus
     */
    float r = 3.240479f * XYZ[0] + -1.537150f * XYZ[1] + -0.498535f * XYZ[2];
    float g = -0.969256f * XYZ[0] + 1.875991f * XYZ[1] + 0.041556f * XYZ[2];
    float b = 0.055648f * XYZ[0] + -0.204043f * XYZ[1] + 1.057311f * XYZ[2];

    return ColorRGB32F(r, g, b);
}

HIPRT_HOST_DEVICE HIPRT_INLINE ColorRGB32F wavelength_to_XYZ(float wavelength)
{
    ColorRGB32F XYZ;

    float index_float = wavelength - CIE_1931_MIN;
    int index_low = hippt::max((int)index_float - 1, 0);
    int index_high = hippt::min(index_low + 1, CIE_1931_samples - 1);
    float t = wavelength - (int)wavelength;

    float x1 = CIE_X_entries[index_low];
    float x2 = CIE_X_entries[index_high];
    float y1 = CIE_Y_entries[index_low];
    float y2 = CIE_Y_entries[index_high];
    float z1 = CIE_Z_entries[index_low];
    float z2 = CIE_Z_entries[index_high];

    XYZ.r = hippt::lerp(x1, x2, t);
    XYZ.g = hippt::lerp(y1, y2, t);
    XYZ.b = hippt::lerp(z1, z2, t);

    // Now scaling by the intensity of the D65 illuminant (which is the point of sRGB)
    int wavelength_index = hippt::min((int)roundf(wavelength), D65_MAX);

    float SPD = D65_SPD[wavelength_index - D65_MIN];
    XYZ *= SPD;
    // Average intensity of the D65 illuminant over its wavelengths
    XYZ /= 22.2175f;

    return XYZ;
}

/**
 * Returns the RGB color of a given wavelength using the CIE 1931 2° Observer CMFs
 * to get the wavelength to XYZ.
 * 
 * The XYZ value of the wavelength is then multiplied by the intensity of the D65
 * illuminant at that wavelength.
 * 
 * That scaled XYZ value is then brought to the sRGB color space (linear sRGB, this is not gamma corrected)
 * using the matrix readily available on Wikipedia: https://en.wikipedia.org/wiki/SRGB#Correspondence_to_CIE_XYZ_stimulus
 * 
 * The resulting RGB value is clamped to 0 to avoid negative values and then that clamped RGB
 * is then normalized such that the average of the clamped RGB values of wavelengths
 * between 360 and 830 is RGB(1.0f, 1.0f, 1.0f)
 * 
 * For rendering purposes, we should only clamp the average of the non-clamped RGB values. We should not
 * clamp the individual RGB values themselves. But I found that this introduced so instabilities + we then
 * have to handle negative values in the system so that's annoying. 
 * 
 * So instead we're clamping the individual values but because that's kind of incorrect practice, we end
 * up we an average of RGB values that is not RGB(1.0f, 1.0f, 1.0f). So that's why we're
 * normalizing with the 'scale' factor in the function to bring that average back to RGB(1.0f, 1.0f, 1.0f)
 * 
 * This normalization trick actually is imperceptible in practice so I guess it's fine and convenient
 */
HIPRT_HOST_DEVICE HIPRT_INLINE ColorRGB32F wavelength_to_RGB_clamped(float wavelength)
{
    const ColorRGB32F scale = ColorRGB32F(1.4979f, 1.13591f, 1.13159f);
    ColorRGB32F RGB = XYZ_to_sRGB(wavelength_to_XYZ(wavelength));
    RGB.clamp(0, 1.0e35f);

    return RGB / scale;
}

#endif

/**
 * Fitted curves for converting a wavelength to its RGB values.
 * 
 * This is actually a fit of the 'wavelength_to_RGB_clamped()' such that
 * we can get the same results as this function but without the need for lookup tables
 * 
 * This function takes wavelengths between 360 and 830nm and returns RGB values such that
 * the average of the RGB values of all wavelengths is RGB(1.0f, 1.0f, 1.0f).
 */
HIPRT_HOST_DEVICE HIPRT_INLINE ColorRGB32F wavelength_to_RGB_fit(float wavelength)
{
    ColorRGB32F RGB;

    if( wavelength < 463.0f)
    {
        RGB.r = -1.2776028240727566e-01f / (1.0f + exp((wavelength - 4.2680623367293401e+02f) / 8.2197460736637176e+00f)) + -1.3925673552505122e-11f * exp((wavelength - 45.0f) / 1.8175459086411596e+01f);
        RGB.r += 1.2898689750552100e-01f;
    }
    else if (wavelength > 553.0f)
    {
        RGB.r = 1.7963649137825513e+01f * ( 1.0f / 2.6577826611702449e+01f) * exp(-0.5f * hippt::square((wavelength - 6.0625724092824566e+02f) * (1.0f / 2.6577826611702449e+01f)));
        RGB.r += 2.5574660155104657e-03f;
    }
    else
        RGB.r = 0.0f;

    RGB.g = 3.4962267376163049e+02f * expf(-0.5f * hippt::square((wavelength-5.4209217455705152e+02f) / -2.9598170255834638e+01f));
    RGB.g /= wavelength;
    RGB.b = exp(3.2987659944421112e+03f + (-2.0975839709372405e+05f / wavelength) -4.6368268395094020e+02f * logf(wavelength));

    // The fitting process was done with scaled data so the data is actually
    // fitted such that the average RGB colors of all wavelength is 0.1. But we want 1.
    // So we multiply by 10.
    return RGB * 10.0f;
}

HIPRT_HOST_DEVICE HIPRT_INLINE ColorRGB32F wavelength_to_RGB(float wavelength)
{
#if WavelengthToRGBMethod == WAVELENGTH_TO_RGB_FIT
    return wavelength_to_RGB_fit(wavelength);
#elif WavelengthToRGBMethod == WAVELENGTH_TO_RGB_TABLES
    return wavelength_to_RGB_clamped(wavelength);
#endif
}

HIPRT_HOST_DEVICE HIPRT_INLINE float sample_wavelength_uniformly(Xorshift32Generator& random_number_generator)
{
	float r = random_number_generator();

    return r * (MAX_SAMPLE_WAVELENGTH - MIN_SAMPLE_WAVELENGTH) + MIN_SAMPLE_WAVELENGTH;
}

/**
 * Reference:
 * [1] [Open PBR Specification] https://academysoftwarefoundation.github.io/OpenPBR/#model/basesubstrate/translucentbase
 * 
 * Given the dispersion parameters of material and a base IOR
 * (assumed to be the IOR of the material measured at 587.6nm),
 * returns the new IOR of the material but as if measured at the given
 * 'wavelength'
 */
HIPRT_HOST_DEVICE HIPRT_INLINE float compute_dispersion_ior(float dispersion_abbe_number, float dispersion_scale, float base_IOR, float wavelength)
{
    if (dispersion_scale == 0.0f)
        return base_IOR;

#define SQUARE_587_6 334777.96f // 587.6^2
#define POW_MIN2_LAMBDA_F_MINUS_LAMBDA_C 0.00000191038851931481f // 486.1^(-2) - 656.3^(-2)

    float abbe_number = dispersion_abbe_number / dispersion_scale;

    float B = (base_IOR - 1.0f) / (abbe_number * POW_MIN2_LAMBDA_F_MINUS_LAMBDA_C);
    float A = base_IOR - B / (SQUARE_587_6);

    return A + B / (wavelength * wavelength);
}

/**
 * Essentially returns the RGB color associated with a wavelength.
 * 
 * Only returns the color if the given 'wavelength' is negative.
 * If the wavelength passed is negative, it is negated so that it becomes
 * positive (hence the passing by reference)
 * 
 * If the wavelength is positive, this implicitely means that the wavelength
 * throughput filter has already been applied to the ray and should not
 * be applied a second time.
 */
HIPRT_HOST_DEVICE HIPRT_INLINE ColorRGB32F get_dispersion_ray_color(float& wavelength, float dispersion_scale)
{
    if (dispersion_scale == 0.0f)
        // No dispersion
        return ColorRGB32F(1.0f);

    if (wavelength >= 0.0f)
        // Wavelength isn't negative, dispersion wavelength throughput filter
        // has already been applied
        return ColorRGB32F(1.0f);

    wavelength *= -1.0f;
    return wavelength_to_RGB(wavelength);
}

/**
 * Below are some utility functions that were used to generate the fit of 'wavelength_to_RGB_fit',
 * verify the implementation etc...
 */
#ifndef __KERNELCC__

#include "Image/Image.h"

/**
 * Write CSV files for the R, G and B values at each wavelength.
 * Used for fitting curves
 */
static void write_wavelength_to_RGB_data_to_file()
{
    const int nb_samples = 10000;

    std::ofstream R("wavelength_to_rgb_R_" + std::to_string(nb_samples) + ".csv");
    std::ofstream G("wavelength_to_rgb_G_" + std::to_string(nb_samples) + ".csv");
    std::ofstream B("wavelength_to_rgb_B_" + std::to_string(nb_samples) + ".csv");
    float Y_sum = 0.0f;
    for (int i = 0; i < nb_samples; i++)
    {
        float wavelength = MIN_SAMPLE_WAVELENGTH + i * (MAX_SAMPLE_WAVELENGTH - MIN_SAMPLE_WAVELENGTH) / (float)nb_samples;

        ColorRGB32F RGB = wavelength_to_RGB(wavelength);

        R << wavelength << ", " << RGB.r << std::endl;
        G << wavelength << ", " << RGB.g << std::endl;
        B << wavelength << ", " << RGB.b << std::endl;
    }
}

/**
 * Prints the average of the RGB value of all wavelengths.
 * This should always output (1.0f, 1.0f, 1.0f)
 */
static void average_RGB_for_render()
{
    ColorRGB32F average_RGB;

    const int  nb_samples = 1000000;
    for (int i = 0; i < nb_samples; i++)
    {
        float wavelength = MIN_SAMPLE_WAVELENGTH + i * (MAX_SAMPLE_WAVELENGTH - MIN_SAMPLE_WAVELENGTH) / (float)nb_samples;

        average_RGB += wavelength_to_RGB(wavelength) / nb_samples;
    }

    std::cout << "Average RGB of all wavelengths for rendering: " << average_RGB << std::endl;
}

/**
 * Computes the RGB values of all wavelengths and write that to a file, producing a rainbow
 * image.
 */
static void write_rainbow_to_file()
{
    const int width = 1280;
    const int height = 720;
    Image32Bit rainbow(width, height, 3);

    for (int x = 0; x < width; x++)
    {
        float t = x / (float)(width - 1);
        float wavelength = t * (MAX_SAMPLE_WAVELENGTH - MIN_SAMPLE_WAVELENGTH) + MIN_SAMPLE_WAVELENGTH;

        ColorRGB32F RGB = wavelength_to_RGB(wavelength);

        for (int y = 0; y < height; y++)
        {
            rainbow[(y * width + x) * 3 + 0] = RGB.r;
            rainbow[(y * width + x) * 3 + 1] = RGB.g;
            rainbow[(y * width + x) * 3 + 2] = RGB.b;
        }
    }

    rainbow.write_image_png("rainbow.png");
}

#endif

#endif
